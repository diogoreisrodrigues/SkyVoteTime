@page "/nom/{Id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using System.Text.Json;
@using SkyVoteTime.Client.API;
@inject TheMovieDBApi movieApi
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    ::-webkit-scrollbar {
        width: 0px;
        /* make scrollbar transparent */
    }

    .containerMovie {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        max-width: 100%;
        margin-bottom: 10vh;
        margin-left: auto;
        margin-right: auto;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
    }

    .movie-card {
        background: #ffffff;
        box-shadow: 0px 6px 18px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 30%;
        margin: 2em;
        border-radius: 10px;
        display: inline-block;
    }

    .movie-header {
        padding: 0;
        margin: 0;
        height: 367px;
        width: 100%;
        display: block;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        background-size: cover;
        background-position: 100% 100%;
    }


    .header-icon-container {
        position: relative;
    }

    .header-icon {
        width: 100%;
        height: 367px;
        line-height: 367px;
        text-align: center;
        vertical-align: middle;
        margin: 0 auto;
        color: #ffffff;
        font-size: 54px;
        text-shadow: 0px 0px 20px #6abcea, 0px 5px 20px #6ABCEA;
        opacity: .85;
    }

        .header-icon:hover {
            background: rgba(0, 0, 0, 0.15);
            font-size: 74px;
            text-shadow: 0px 0px 20px #6abcea, 0px 5px 30px #6ABCEA;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            opacity: 1;
        }

    .movie-card:hover {
        -webkit-transform: scale(1.03);
        transform: scale(1.03);
        box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.08);
    }

    .movie-content {
        padding-top: 18px;
        margin: 0;
    }

    .movie-content-header, .movie-info {
        display: table;
        width: 100%;
    }

    .movie-title {
        font-size: 24px;
        margin: 0;
        display: table-cell;
    }

    .imax-logo {
        width: 50px;
        height: 15px;
        background: url("https://6a25bbd04bd33b8a843e-9626a8b6c7858057941524bfdad5f5b0.ssl.cf5.rackcdn.com/media_kit/3e27ede823afbf139c57f1c78a03c870.jpg") no-repeat;
        background-size: contain;
        display: table-cell;
        float: right;
        position: relative;
        margin-top: 5px;
    }

    .movie-info {
        margin-top: 1em;
    }

    .info-section {
        display: table-cell;
        text-transform: uppercase;
        text-align: center;
    }

        .info-section:first-of-type {
            text-align: left;
        }

        .info-section:last-of-type {
            text-align: right;
        }

        .info-section label {
            display: block;
            color: rgba(0, 0, 0, 0.5);
            margin-bottom: .5em;
            font-size: 9px;
        }

        .info-section span {
            font-weight: 700;
            font-size: 11px;
        }


    .movie-card {
        width: 95%;
        max-width: 30%;
        margin: 1em;
        display: block;
    }

    .container {
        padding: 0;
    }

    .checkbox-wrapper-24 {
        margin-top: 10px;
        text-align: center;
    }

    }
</style>

<PageTitle>Nominees</PageTitle>



<div class="Nominees">
    <div class="px-5 mx-5 my-5">
        <h1 class="TitleNominees">@competition.Name</h1>
    </div>

    <br />
    

    @if (competition.Movies != null && (competition.Type == "Movies" || competition.Type == "TVShow"))
    {

        @foreach (Movie movie in competition.Movies)
        {
            <div class="container" style="background: rgba(0,0,0,0.7); border-radius: 20px; -webkit-transform: scale(1.03); transform: scale(1.03); box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.08); backdrop-filter: blur(2px);">
                <div class="row">
                    <div class="col-sm-3">
                        <img style="display: flex; align-items: center; padding: 15px; perspective: 100px;" src="https://image.tmdb.org/t/p/w342/@movie.poster_path" alt="" />
                    </div>
                    <div class="col-sm-9" style="color:white">
                        <div style="height: 285px;">
                            <!--<div class="nomTitle">@movie.title</div>-->
                            <h1 class="font-weight-bold">@movie.title</h1>
                            <div class="mr-5">


                                <div style="font-size: 120%; max-height: 130px;overflow: overlay; " class="my-5">
                                    <b>Synopsis:</b> @movie.overview
                                </div>
                            </div>

                        </div>
                        <div class="row ">
                            <div class="col-9" style="display: flex; align-items: center;">
                            </div>
                            <div class="col-3" style=" text-align: center;">

                                <button @onclick="() => Update(movie)" type="button" class="btn btn-secondary btn-lg" style="color: #fff; font-weight:bold; background-color: #D4BE74">Vote here!</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <br />
            <br />
        }

    }
    else if (competition.Persons != null && competition.Type == "Acting")
    {

        <div class="containerMovie container">
            @foreach (var person in competition.Persons)
            {
                <div class="movie-card" style="padding: 15px; background: rgba(0,0,0,0.7); border-radius: 20px; backdrop-filter: blur(2px);">
                    <div class="movie-header">
                        <img src="https://image.tmdb.org/t/p/w342/@person.profile_path" class="movie-header" />
                    </div><!--movie-header-->

                    <div class="movie-content">
                        <div class="movie-content-header" style="text-align:center">
                            <h3 class="movie-title text-light">@person.name</h3>
                        </div>
                        <div class="movie-info">

                            <div class="checkbox-wrapper-24">
                                <button @onclick="() => UpdatePerson(person)" type="button" class="btn btn-secondary btn-lg" style="color: #fff; font-weight:bold; background-color: #D4BE74">Vote here!</button>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>

    }




</div>

@code {

    [Parameter]
    public string Id { get; set; }

    public Competition? competition;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    string? email;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Id);

        competition = await Http.GetFromJsonAsync<Competition>("api/competition/" + Id);

        Console.WriteLine(competition.ToString());

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        email = user.FindFirst(c => c.Type == "name")?.Value;

    }

    private async Task Update(Movie movie)
    {

        var vote = new Vote
            {
                Id = 0,
                email = email
            };

        movie.Votes ??= new List<Vote>();

        movie.Votes.Add(vote);

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Vote for this nominee?");
        if (confirmed)
        {
            try
            {
                var response = await Http.PutAsJsonAsync("api/Movie/" + movie.Id, movie);

                if (response.IsSuccessStatusCode)
                {

                    NavigationManager.NavigateTo("competitions");
                }
                else
                {
                    // Handle HTTP request error
                    Console.WriteLine("HTTP request error: " + response.StatusCode);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private async Task UpdateCompetitionState(Competition competition)
    {

        competition.State = CompetitionState.Voted;
        try
        {
            var response = await Http.PutAsJsonAsync("api/Competition/Put/" + competition.Id, competition);

            if (response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Vote Submited!");
                NavigationManager.NavigateTo("competitions");
            }
            else
            {
                    // Handle HTTP request error
                Console.WriteLine("HTTP request error: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        
    }



    private async Task UpdatePerson(Person person)
    {

        var vote = new Vote
            {
                Id = 0,
                email = email
            };

        person.Votes ??= new List<Vote>();

        person.Votes.Add(vote);

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Vote for this nominee?");
        if (confirmed)
        {
            try
            {
                var response = await Http.PutAsJsonAsync("api/Person/" + person.Id, person);

                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("competitions");
                }
                else
                {
                    // Handle HTTP request error
                    Console.WriteLine("HTTP request error: " + response.StatusCode);
                }
            }
            catch (Exception ex)
            { 
                Console.WriteLine(ex.Message);
            }
        }
    }



    void Cancel() => NavigationManager.NavigateTo("competitions");


}
