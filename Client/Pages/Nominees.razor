@page "/nom/{Id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using System.Text.Json;
@using SkyVoteTime.Client.API;
@inject TheMovieDBApi movieApi
@inject AuthenticationStateProvider AuthenticationStateProvider


<style>
    ::-webkit-scrollbar {
        width: 0px;
         /* make scrollbar transparent */
    }
</style>

<PageTitle>Nominees</PageTitle>



<div class="Nominees">
    <div class="px-5 mx-5 my-5">
        <h1 class="TitleNominees">@competition.Name</h1>
    </div>

    <br />


    @if (competition.Movies != null)
    {

        @foreach (Movie movie in competition.Movies)
        {
            <div class="container" style="background: rgba(0,0,0,0.7); border-radius: 20px;">
                <div class="row">
                    <div class="col-sm-3">
                                <img style="display: flex; align-items: center; padding: 15px; perspective: 100px;" src="https://image.tmdb.org/t/p/w342/@movie.poster_path" alt="" />
                    </div>
                    <div class="col-sm-9" style="color:white">
                        <div style="height: 285px;">
		                    <!--<div class="nomTitle">@movie.title</div>-->
		                    <h1 class="font-weight-bold">@movie.title</h1>
		                    <div class="my-2">
			                    <div style="font-size: 120%" class="my-3">
				                    <b>Directors:</b> Daniel KwanDaniel and Daniel Scheinert
			                    </div>

			                    <div style="font-size: 120%" class="my-3">
				                    <b>Actors:</b> Michelle Yeoh, Stephanie Hsu and Jamie Lee Curtis
			                    </div>

                                <div style="font-size: 120%; max-height: 100px;overflow: overlay; " class="my-4">
				                    <b>Synopsis:</b> @movie.overview
			                    </div>
		                    </div>

	                    </div>
	                    <div class="row ">
		                    <div class="col-9" style="display: flex; align-items: center;">

                                <span class="badge badge-pill badge-dark" style="margin-right: 15px; font-size: 20px;background: rgba(255, 255, 255, 0.2); border: 1px solid #FFFFFF; box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25); border-radius: 20px; padding: 10px;">Ação</span>
			                        
		                    </div>
		                    <div class="col-3" style=" text-align: right;">

                                <button @onclick="() => Update(movie)" type="button" class="btn btn-secondary btn-lg" style="color: #fff; font-weight:bold; background-color: #D4BE74">Vote here!</button>
		                    </div>
               

	                    </div>
                    </div>
                </div>
            </div>

            <br />
            <br />
        }

    }
    
    


</div>

@code{

    [Parameter]
    public string Id { get; set; }

    public Competition? competition;

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	string? email;

	protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Id);

        competition = await Http.GetFromJsonAsync<Competition>("api/competition/" + Id);

	    Console.WriteLine(competition.ToString());

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		email = user.FindFirst(c => c.Type == "name")?.Value;

    }

    private async Task Update(Movie movie)
    {

        var vote = new Vote
            {
                Id = 0,
				email = email
            };

        movie.Votes ??= new List<Vote>();


        
        
        movie.Votes.Add(vote);

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Vote for this nominee?");
        if (confirmed)
        {
            try
            {
                var response = await Http.PutAsJsonAsync("api/Movie/" + movie.Id, movie);

                if (response.IsSuccessStatusCode)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Vote Submited!");
                    NavigationManager.NavigateTo("competitions");
                }
                else
                {
                    // Handle HTTP request error
                    Console.WriteLine("HTTP request error: " + response.StatusCode);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }



    void Cancel() => NavigationManager.NavigateTo("competitions");


}
