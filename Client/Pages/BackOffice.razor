@page "/backoffice"
@using System.Text.Json;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<style>
    .page {
		background-color: #FFF;
        background-image: url("../Assets/BackofficeBackground.png");      
	}
    th, td{
        padding: 18px !important;
    }
</style>


<div class="container-lg my-5" style="padding: 20px; border-radius: 20px;">
    <div class="row">
        <div class="col-10 text-light">
            <h1 style="margin-bottom: 25px; text-transform: uppercase; font-family: Inter; font-style: normal; font-size: 38px;">BackOffice - Competitions</h1>
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-lg text-light" style="margin: 0; position: absolute; top: 50%; -ms-transform: translateY(-50%); transform: translateY(-50%);background-color: #D4BE74"><a class="text-light" href="/createcomp">Create Competition</a></button>
        </div>

    </div>


    <div style=" box-shadow: 8px 7px 20px 0px">
        <table class="table" style="background-color: #e6e6e6;">
            <thead class="text-light" style="background-color: #D4BE74;">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Categories</th>
                    <th scope="col">Nominees</th>
                    <th scope="col">Status</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var compet in competitionList)
                {
                    <tr>
                        <th style="vertical-align: middle" scope="row">@compet.Id</th>
                        <td style="vertical-align: middle">@compet.Name</td>
                        <td style="vertical-align: middle">@compet.Description</td>
                        @{
                            List<String> categories = JsonSerializer.Deserialize<List<String>>(compet.CategoriesJson);
                        }
                        @if (categories.Count == 0)
                        {
                            <td style="vertical-align: middle">None</td>
                        }
                        else
                        {
                            <td style="vertical-align: middle">
                                @foreach (var c in categories)
                                {
                                    <span>@c</span>
                                    @if (c != categories.Last())
                                    {
                                        <span>, </span>
                                    }
                                }
                            </td>
                        }

                        <td style="vertical-align: middle">
                            @if (compet.Type == "Movies" || compet.Type == "filme")
                            {
                                @foreach (Movie movie in compet.Movies)
                                {
                                    <span>@movie.title</span>
                                    @if (movie != compet.Movies.Last())
                                    {
                                        <span> | </span>
                                    }
                                }
                            }
                            else
                            {
                                @foreach (Person person in compet.Persons)
                                {
                                    <span>@person.name</span>
                                    @if (person != compet.Persons.Last())
                                    {
                                        <span> | </span>
                                    }
                                }
                            }
                        </td>
                        @if (compet.State == CompetitionState.Public)
                        {
                            <td style="vertical-align: middle; color:green; font-weight:bold">@CompetitionState.Public</td>
                        }
                        else if (compet.State == CompetitionState.Finished)
                        {
                            <td style="vertical-align: middle; color:blue; font-weight:bold">@CompetitionState.Finished</td>
                        }
                        else
                        {
                            <td style="vertical-align: middle; color:red; font-weight:bold">@CompetitionState.Private</td>
                        }
                        <td style="vertical-align: middle"><a class="btn btn-primary" href="/editcompetition/@compet.Id">Edit</a></td>
                        <td style="vertical-align: middle"><button class="btn btn-danger" @onclick="() => Delete(compet.Id)">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public int Id;

    public Competition? competition;

    List<Competition> competitionList = new List<Competition>();
    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/competition");
        response.EnsureSuccessStatusCode();
        competitionList = await response.Content.ReadFromJsonAsync<List<Competition>>();
    }

    protected async Task Delete(int Id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this competition?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync("api/Competition/" + Id);
            bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
            if (deleteResponse)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
                
            }
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("personlist");
    }

}
