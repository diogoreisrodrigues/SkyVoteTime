@page "/competitions"
@using SkyVoteTime.Shared
@using System.Text.Json;
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject HttpClient _httpClient
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    p::-webkit-scrollbar {
        display: none;
    }
</style>


        <h1 class="titleCompetitions mb-5">Competitions</h1>

<AuthorizeView>
    <Authorized>


        <div class="container">
   
            <div class="row my-5 py-3">
                <div class="col-1">
                    <p class="" style="font-size: 20px; color:white">Filter :</p>
                </div>
                <div class="col-10">
                    <nav role="navigation" class="primary-navigation">
                        <ul style="padding:0">
                            <li>
                                <a href="#" style="color: white;">Comepetition State &dtrif;</a>
                                <ul class="dropdown" style="z-index: 2;">
                                    <li><a @onclick="() => SetCurrentState(CompetitionState.Public)">Public</a></li>
                                    <li><a @onclick="() => SetCurrentState(CompetitionState.Finished)">Finished</a></li>
                                    
                                </ul>
                            </li>
                            <li>
                                <a href="#" style="color: white;">Competition Type &dtrif;</a>
                                <ul class="dropdown" style="z-index: 2;">
                                    <li><a @onclick="() => SetCompetitionType(typeAll)">All</a></li>
                                    <li><a @onclick="() => SetCompetitionType(typeMovies)">Movies</a></li>
                                    <li><a @onclick="() => SetCompetitionType(typeTVShows)">TVShows</a></li>
                                    <li><a @onclick="() => SetCompetitionType(typeActors)">Actors</a></li>
                                    
                                </ul>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>

             @if (competitionList.Count != 0)
             {
                <div class="row mb-5">
                @foreach (Competition competition in competitionList)
                {
                        if (competition.State == currentState && currentState == CompetitionState.Public && IsCompetitionTypeMatch(competition.Type))
                    {
                        List<String> categories = JsonSerializer.Deserialize<List<String>>(competition.CategoriesJson);

                            
                            <div class="blog-card">
                                <img class="blog-img" src=@competition.ImageUrl />
                                <div class="text-overlay">
                                    <div class="row">
                                        <div class="col-12 my-3" style="display: flex; align-items: center">
                                            @if (categories.Count == 0)
                                            {
                                                <span class="badge badge-pill badge-dark" style="margin-right: 15px; background-color: #D4BE74;padding: 6px;  font-size:12px">None</span>
                                            }
                                            else
                                            {
                                                @foreach (var category in categories)
                                                {
                                                    <span class="badge badge-pill badge-dark" style="margin-right: 15px; background-color: #D4BE74; padding: 6px;  font-size:12px">@category</span>
                                                }
                                            }
                                        </div>

                                    </div>
                                    <h3>@competition.Name</h3>
                                    <p style="max-height: 50px;overflow: overlay;">@competition.Description</p>
                                    
                                    <div style="text-align: center;">
                                       
                                        <a href="/nom/@competition.Id" style="color: #fff">

                                            <button class="button-50" role="button"><b>View Results!</b></button>
                                            
                                        </a>
                                    </div>

                                </div>
                            </div>
                    }

                        if (competition.State == currentState && currentState == CompetitionState.Finished && IsCompetitionTypeMatch(competition.Type))
                    {
                        List<String> categories = JsonSerializer.Deserialize<List<String>>(competition.CategoriesJson);

                            <div class="blog-card">
                                <img class="blog-img" src=@competition.ImageUrl />
                                <div class="text-overlay">
                                    <div class="row">
                                        <div class="col-12 my-3" style="display: flex; align-items: center">
                                            @if (categories.Count == 0)
                                            {
                                                <span class="badge badge-pill badge-dark" style="margin-right: 15px; background-color: #D4BE74;padding: 6px;  font-size:12px">None</span>
                                            }
                                            else
                                            {
                                                @foreach (var category in categories)
                                                {
                                                    <span class="badge badge-pill badge-dark" style="margin-right: 15px; background-color: #D4BE74; padding: 6px;  font-size:12px">@category</span>
                                                }
                                            }
                                        </div>

                                    </div>
                                    <h3>@competition.Name</h3>
                                    <p>@competition.Description</p>
                                    
                                    <div style="text-align: center;">
                                        
                                        <a href="/winner/@competition.Id" style="color: #fff">

                                            <button class="button-50" style="background-color:darkgreen" role="button"><b>View Results!</b></button>
                                            
                                        </a>
                                        
                                    </div>

                                </div>
                            </div>
                    }
            
                }
                </div>

            }
            else
            {
                <div style="height: 50vh; text-align:center; padding-top:5vh" class="m-5">
                    <h2 class="text-light mt-5 pt-5">No Competitions to show, wait for one to Start!</h2>
                </div>
                
            }

        </div>
    </Authorized>
    <NotAuthorized>
        <div style="height: 50vh; text-align:center; padding-top:5vh" class="m-5">
            <h1 class="text-light mt-5 pt-5">To view all the Competitions, please Log in or Register first.</h1>
        </div>
		
    </NotAuthorized>
</AuthorizeView>


@code {
    private CompetitionState currentState = CompetitionState.Public;
    private String currentType = "Any";
    private String typeAll = "Any";
    private String typeMovies = "Movies";
    private String typeTVShows = "TVShow";
    private String typeActors = "Acting";


    public Competition competition = new Competition
        {
            Movies = new List<Movie>(),
            Description = "",
            CategoriesJson = "",
            Name = "",
            Id = 0,
            Type = "",
            Persons = new List<Person>()
        };

    List<Competition> competitionList = new List<Competition>();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    string? email;

    private void SetCompetitionType(String type)
    {
        currentType = type;
    }

    private bool IsCompetitionTypeMatch(String type)
    {
        if (currentType == "Any")
        {
            return true;
        }

        return type == currentType;
    }


    private void SetCurrentState(CompetitionState state)
    {
        currentState = state;
    }


    private void ChangeState(ChangeEventArgs e)
    {
        var state = e.Value.ToString();

        if (state == CompetitionState.Public.ToString())
        {
            competition.State = CompetitionState.Public;
        }
        else if (state == CompetitionState.Private.ToString())
        {
            competition.State = CompetitionState.Private;
        }
        else if (state == CompetitionState.Finished.ToString())
        {
            competition.State = CompetitionState.Finished;
        }
    }

    protected override async Task OnInitializedAsync()
    {
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		email = user.FindFirst(c => c.Type == "name")?.Value;

        var response = await _httpClient.GetAsync("api/competition/GetAll/"+ email);
        response.EnsureSuccessStatusCode();
        competitionList = await response.Content.ReadFromJsonAsync<List<Competition>>();

		
    }
}






