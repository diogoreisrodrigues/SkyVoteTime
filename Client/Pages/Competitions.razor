@page "/competitions"
@using SkyVoteTime.Shared
@using System.Text.Json;
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject HttpClient _httpClient
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider




<h1 class="titleCompetitions">Competitions</h1>

<AuthorizeView>
    <Authorized>

        <div class="container">
   
            <div class="texto">
                <label for="competitionState">Competition State:</label>
                <select class="form-control" style="height: auto;width: 16%;" @bind=currentState>
                    <option value=@CompetitionState.Public>Public</option>
                    <option value=@CompetitionState.Finished>Finished</option>
                </select>
            </div>

             @if (competitionList != null)
            {
                @foreach (Competition competition in competitionList)
                {
                    if (competition.State == currentState && currentState == CompetitionState.Public)
                    {
                        List<String> categories = JsonSerializer.Deserialize<List<String>>(competition.CategoriesJson);

                        <div>
                            <div class="cardComp">
                                <div style="height: 189px">
                                    <h1>@competition.Name</h1>
                                    <p>Competition Type: @competition.Type</p>
                                    <p>Description: @competition.Description</p>
                                </div>

                                <div class="row">
                                    <div class="col-9" style="display: flex; align-items: center;">
                                        @if (categories.Count == 0)
                                        {
                                            <span class="badge badge-pill badge-dark" style="margin-right: 15px; font-size: 20px; background-color: #000; padding: 10px;">None</span>
                                        }
                                        else
                                        {
                                            @foreach (var category in categories)
                                            {
                                                <span class="badge badge-pill badge-dark" style="margin-right: 15px; font-size: 20px; background-color: #000; padding: 10px;">@category</span>
                                            }
                                        }
                                    </div>
                                    <div class="col-3" style="    text-align: right;">
                                        <button class="button-50" role="button">
                                            <a href="/nom/@competition.Id" style="color: #fff"> <b>View Nominees!</b> </a>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    if (competition.State == currentState && currentState == CompetitionState.Finished)
                    {
                        List<String> categories = JsonSerializer.Deserialize<List<String>>(competition.CategoriesJson);

                        <div>
                            <div class="cardComp">
                                <div style="height: 189px">
                                    <h1>@competition.Name</h1>
                                    <p>Competition Type: @competition.Type</p>
                                    <p>Description: @competition.Description</p>
                                </div>

                                <div class="row">
                                    <div class="col-9" style="display: flex; align-items: center;">
                                        @if (categories.Count == 0)
                                        {
                                            <span class="badge badge-pill badge-dark" style="margin-right: 15px; font-size: 20px; background-color: #000; padding: 10px;">None</span>
                                        }
                                        else
                                        {
                                            @foreach (var category in categories)
                                            {
                                                <span class="badge badge-pill badge-dark" style="margin-right: 15px; font-size: 20px; background-color: #000; padding: 10px;">@category</span>
                                            }
                                        }
                                    </div>
                                    <div class="col-3" style="text-align: right;">
                                        <button class="button-50" style="background-color:darkgreen" role="button">
                                            <a href="/winner/@competition.Id" style="color: #fff"> <b>View Results!</b> </a>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
            
                }

             }
     
        </div>
    </Authorized>
    <NotAuthorized>
        <div style="height: 50vh; text-align:center; padding-top:5vh" class="m-5">
            <h1 class="text-light mt-5 pt-5">To view all the Competitions, please Log in or Register first.</h1>
        </div>
		
    </NotAuthorized>
</AuthorizeView>

@code {
    private CompetitionState currentState = CompetitionState.Public;

    public Competition competition = new Competition
        {
            Movies = new List<Movie>(),
            Description = "",
            CategoriesJson = "",
            Name = "",
            Id = 0,
            Type = "",
            Persons = new List<Person>()
        };

    List<Competition> competitionList = new List<Competition>();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    string? email;


    private void ChangeState(ChangeEventArgs e)
    {
        var state = e.Value.ToString();

        if (state == CompetitionState.Public.ToString())
        {
            competition.State = CompetitionState.Public;
        }
        else if (state == CompetitionState.Private.ToString())
        {
            competition.State = CompetitionState.Private;
        }
        else if (state == CompetitionState.Finished.ToString())
        {
            competition.State = CompetitionState.Finished;
        }
    }

    protected override async Task OnInitializedAsync()
    {
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		email = user.FindFirst(c => c.Type == "name")?.Value;

        var response = await _httpClient.GetAsync("api/competition/GetAll/"+ email);
        response.EnsureSuccessStatusCode();
        competitionList = await response.Content.ReadFromJsonAsync<List<Competition>>();

		
    }
}






